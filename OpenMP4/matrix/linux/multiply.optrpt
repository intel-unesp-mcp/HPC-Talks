Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: min..xN4vv(float, float)

    Report from: Vector optimizations [vec]

remark #15301: FUNCTION WAS VECTORIZED   [ ../src/multiply.c(32,31) ]
===========================================================================

Begin optimization report for: min..xM4vv(float, float)

    Report from: Vector optimizations [vec]

remark #15301: FUNCTION WAS VECTORIZED   [ ../src/multiply.c(32,31) ]
===========================================================================

Begin optimization report for: distsq..xN4vv(float, float)

    Report from: Vector optimizations [vec]

remark #15301: FUNCTION WAS VECTORIZED   [ ../src/multiply.c(37,34) ]
===========================================================================

Begin optimization report for: distsq..xM4vv(float, float)

    Report from: Vector optimizations [vec]

remark #15301: FUNCTION WAS VECTORIZED   [ ../src/multiply.c(37,34) ]
===========================================================================

Begin optimization report for: multiply0(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(179,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between c line 182 and a line 182

   LOOP BEGIN at ../src/multiply.c(180,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c line 182 and a line 182

      LOOP BEGIN at ../src/multiply.c(181,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between c line 182 and c line 182
      LOOP END

      LOOP BEGIN at ../src/multiply.c(181,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply1(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(194,5)
<Distributed chunk1>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between j line 195 and j line 195
LOOP END

LOOP BEGIN at ../src/multiply.c(194,5)
<Distributed chunk1>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between j line 195 and j line 195
LOOP END

LOOP BEGIN at ../src/multiply.c(194,5)
<Distributed chunk1>
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 1.370 
   remark #15478: estimated potential speedup: 2.130 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/multiply.c(194,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/multiply.c(194,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between k line 196 and k line 196

   LOOP BEGIN at ../src/multiply.c(195,9)
   <Distributed chunk1>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c line 197 and a line 197

      LOOP BEGIN at ../src/multiply.c(196,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between c line 197 and c line 197
      LOOP END

      LOOP BEGIN at ../src/multiply.c(196,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply2(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(209,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c line 212 and c line 212

   LOOP BEGIN at ../src/multiply.c(211,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c line 212 and c line 212
   LOOP END

   LOOP BEGIN at ../src/multiply.c(211,10)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply3(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(226,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c line 229 and c line 229

   LOOP BEGIN at ../src/multiply.c(228,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c line 229 and a line 229
   LOOP END

   LOOP BEGIN at ../src/multiply.c(228,4)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply4(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(242,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(245,7)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.750 
      remark #15478: estimated potential speedup: 2.610 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(245,7)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply5(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(260,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(263,9)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.750 
      remark #15478: estimated potential speedup: 2.610 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(263,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply6(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(280,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(283,9)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.750 
      remark #15478: estimated potential speedup: 2.610 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(283,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply7(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(301,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(304,11)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.750 
      remark #15478: estimated potential speedup: 2.610 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(304,11)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply8(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(324,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(327,11)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.750 
      remark #15478: estimated potential speedup: 2.610 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(327,11)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply9(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(350,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) line 351 and call:__kmpc_end_serialized_paral line 354
LOOP END

LOOP BEGIN at ../src/multiply.c(355,7)
   remark #15336: simd loop was not vectorized: conditional assignment to a scalar   [ ../src/multiply.c(356,27) ]
   remark #13379: loop was not vectorized with "simd"

   LOOP BEGIN at ../src/multiply.c(356,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between a line 357 and c line 359
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply10(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(380,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) line 381 and call:__kmpc_end_serialized_paral line 385
LOOP END

LOOP BEGIN at ../src/multiply.c(386,7)
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 12 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 88 
   remark #15477: vector loop cost: 51.250 
   remark #15478: estimated potential speedup: 1.700 
   remark #15487: type converts: 14 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/multiply.c(386,7)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
===========================================================================
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


*MIC* Begin optimization report for: min..zN16vv(float, float)

    Report from: Vector optimizations [vec]

remark #15301: FUNCTION WAS VECTORIZED   [ ../src/multiply.c(32,31) ]
===========================================================================

*MIC* Begin optimization report for: min..zM16vv(float, float)

    Report from: Vector optimizations [vec]

remark #15301: FUNCTION WAS VECTORIZED   [ ../src/multiply.c(32,31) ]
===========================================================================

*MIC* Begin optimization report for: distsq..zN16vv(float, float)

    Report from: Vector optimizations [vec]

remark #15301: FUNCTION WAS VECTORIZED   [ ../src/multiply.c(37,34) ]
===========================================================================

*MIC* Begin optimization report for: distsq..zM16vv(float, float)

    Report from: Vector optimizations [vec]

remark #15301: FUNCTION WAS VECTORIZED   [ ../src/multiply.c(37,34) ]
===========================================================================

*MIC* Begin optimization report for: multiply0(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(179,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between c line 182 and a line 182

   LOOP BEGIN at ../src/multiply.c(180,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c line 182 and a line 182

      LOOP BEGIN at ../src/multiply.c(181,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between c line 182 and c line 182
      LOOP END

      LOOP BEGIN at ../src/multiply.c(181,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply1(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(194,5)
<Distributed chunk1>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between j line 195 and j line 195
LOOP END

LOOP BEGIN at ../src/multiply.c(194,5)
<Distributed chunk1>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between j line 195 and j line 195
LOOP END

LOOP BEGIN at ../src/multiply.c(194,5)
<Distributed chunk1>
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.680 
   remark #15478: estimated potential speedup: 4.050 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/multiply.c(194,5)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../src/multiply.c(194,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between k line 196 and k line 196

   LOOP BEGIN at ../src/multiply.c(195,9)
   <Distributed chunk1>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c line 197 and a line 197

      LOOP BEGIN at ../src/multiply.c(196,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between c line 197 and c line 197
      LOOP END

      LOOP BEGIN at ../src/multiply.c(196,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply2(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(209,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c line 212 and c line 212

   LOOP BEGIN at ../src/multiply.c(211,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c line 212 and c line 212
   LOOP END

   LOOP BEGIN at ../src/multiply.c(211,10)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply3(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(226,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c line 229 and c line 229

   LOOP BEGIN at ../src/multiply.c(228,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c line 229 and a line 229
   LOOP END

   LOOP BEGIN at ../src/multiply.c(228,4)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply4(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(242,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(245,7)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/multiply.c(245,7)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 2.900 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(245,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ../src/multiply.c(245,7)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply5(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(260,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(263,9)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/multiply.c(263,9)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 2.900 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(263,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ../src/multiply.c(263,9)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply6(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(280,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(283,9)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/multiply.c(283,9)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 2.900 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(283,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ../src/multiply.c(283,9)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply7(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(301,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(304,11)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/multiply.c(304,11)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 2.900 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(304,11)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ../src/multiply.c(304,11)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply8(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(324,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/multiply.c(327,11)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/multiply.c(327,11)
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 2.900 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/multiply.c(327,11)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ../src/multiply.c(327,11)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply9(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(350,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand line 351 and call:__kmpc_end_serialized_paral line 354
LOOP END

LOOP BEGIN at ../src/multiply.c(355,7)
   remark #15336: simd loop was not vectorized: conditional assignment to a scalar   [ ../src/multiply.c(356,27) ]
   remark #13379: loop was not vectorized with "simd"

   LOOP BEGIN at ../src/multiply.c(356,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between a line 357 and c line 359
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: multiply10(int, int, int, TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096], TYPE (*)[4096])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/multiply.c(380,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand line 381 and call:__kmpc_end_serialized_paral line 385
LOOP END

LOOP BEGIN at ../src/multiply.c(386,7)
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 12 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 88 
   remark #15477: vector loop cost: 33.310 
   remark #15478: estimated potential speedup: 2.470 
   remark #15487: type converts: 14 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/multiply.c(386,7)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================
