Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: sum(double *, double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at matrix.c(18,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix.c(20,5)
   <Multiversioned v1>
      remark #15388: vectorization support: reference c has aligned access   [ matrix.c(21,7) ]
      remark #15388: vectorization support: reference a has aligned access   [ matrix.c(21,7) ]
      remark #15388: vectorization support: reference b has aligned access   [ matrix.c(21,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 17 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 9.040 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at matrix.c(20,5)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15388: vectorization support: reference c has aligned access   [ matrix.c(21,7) ]
      remark #15388: vectorization support: reference a has aligned access   [ matrix.c(21,7) ]
      remark #15388: vectorization support: reference b has aligned access   [ matrix.c(21,7) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at matrix.c(20,5)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at matrix.c(20,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at matrix.c(20,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: sumLoopTiling(double *, double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at matrix.c(32,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix.c(33,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at matrix.c(34,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at matrix.c(36,9)
         <Multiversioned v1>
            remark #15388: vectorization support: reference c has aligned access   [ matrix.c(37,11) ]
            remark #15388: vectorization support: reference a has aligned access   [ matrix.c(37,11) ]
            remark #15388: vectorization support: reference b has aligned access   [ matrix.c(37,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 17 
            remark #15477: vector loop cost: 1.250 
            remark #15478: estimated potential speedup: 13.600 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at matrix.c(36,9)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multv1(double *, double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at matrix.c(50,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix.c(51,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at matrix.c(52,5)
      <Peeled loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at matrix.c(52,5)
      <Multiversioned v1>
         remark #15388: vectorization support: reference c has aligned access   [ matrix.c(53,9) ]
         remark #15388: vectorization support: reference c has aligned access   [ matrix.c(53,9) ]
         remark #15389: vectorization support: reference b has unaligned access   [ matrix.c(53,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.438
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 24 
         remark #15477: vector loop cost: 2.000 
         remark #15478: estimated potential speedup: 8.200 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at matrix.c(52,5)
      <Remainder loop for vectorization, Multiversioned v1>
         remark #15389: vectorization support: reference c has unaligned access   [ matrix.c(53,9) ]
         remark #15389: vectorization support: reference c has unaligned access   [ matrix.c(53,9) ]
         remark #15389: vectorization support: reference b has unaligned access   [ matrix.c(53,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.818
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at matrix.c(52,5)
      <Remainder loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at matrix.c(52,5)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at matrix.c(52,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multv2(double *, double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at matrix.c(62,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix.c(63,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at matrix.c(65,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at matrix.c(65,7)
         remark #15388: vectorization support: reference a has aligned access   [ matrix.c(66,11) ]
         remark #15328: vectorization support: gather was emulated for the variable b:  strided by non-constant value   [ matrix.c(66,42) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 8
         remark #15309: vectorization support: normalized vectorization overhead 0.259
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 15 
         remark #15477: vector loop cost: 3.500 
         remark #15478: estimated potential speedup: 3.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at matrix.c(65,7)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference a has unaligned access   [ matrix.c(66,11) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 2.133
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at matrix.c(65,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multv3(double *, double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at matrix.c(75,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix.c(76,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at matrix.c(79,4)
         remark #15388: vectorization support: reference c has aligned access   [ matrix.c(80,11) ]
         remark #15388: vectorization support: reference c has aligned access   [ matrix.c(80,11) ]
         remark #15388: vectorization support: reference b has aligned access   [ matrix.c(80,11) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.071
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 24 
         remark #15477: vector loop cost: 1.750 
         remark #15478: estimated potential speedup: 9.060 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at matrix.c(79,4)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference c has aligned access   [ matrix.c(80,11) ]
         remark #15388: vectorization support: reference c has aligned access   [ matrix.c(80,11) ]
         remark #15388: vectorization support: reference b has aligned access   [ matrix.c(80,11) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.714
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at matrix.c(79,4)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multv4(double *, double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at matrix.c(93,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix.c(94,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at matrix.c(95,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at matrix.c(96,9)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at matrix.c(99,4)
               remark #15388: vectorization support: reference c has aligned access   [ matrix.c(100,13) ]
               remark #15388: vectorization support: reference c has aligned access   [ matrix.c(100,13) ]
               remark #15388: vectorization support: reference b has aligned access   [ matrix.c(100,13) ]
               remark #15305: vectorization support: vector length 4
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.071
               remark #15300: LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 2 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 24 
               remark #15477: vector loop cost: 1.750 
               remark #15478: estimated potential speedup: 9.060 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at matrix.c(99,4)
            <Remainder loop for vectorization>
               remark #15388: vectorization support: reference c has aligned access   [ matrix.c(100,13) ]
               remark #15388: vectorization support: reference c has aligned access   [ matrix.c(100,13) ]
               remark #15388: vectorization support: reference b has aligned access   [ matrix.c(100,13) ]
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.714
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at matrix.c(99,4)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: init(double *, double *, double *, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at matrix.c(4,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix.c(5,5)
   <Peeled loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at matrix.c(5,5)
   <Multiversioned v1>
      remark #15389: vectorization support: reference a has unaligned access   [ matrix.c(6,7) ]
      remark #15389: vectorization support: reference b has unaligned access   [ matrix.c(7,7) ]
      remark #15388: vectorization support: reference c has aligned access   [ matrix.c(8,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 32 
      remark #15477: vector loop cost: 5.500 
      remark #15478: estimated potential speedup: 4.820 
      remark #15487: type converts: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at matrix.c(5,5)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference a has unaligned access   [ matrix.c(6,7) ]
      remark #15389: vectorization support: reference b has unaligned access   [ matrix.c(7,7) ]
      remark #15389: vectorization support: reference c has unaligned access   [ matrix.c(8,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.042
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at matrix.c(5,5)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at matrix.c(5,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at matrix.c(5,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END
===========================================================================
